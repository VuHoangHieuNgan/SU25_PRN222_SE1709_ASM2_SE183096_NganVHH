@page "/AppointmentsNganVHHs/AppointmentsNganVHHForm/{AppointmentNganID:int?}"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using DrugPrevention.Repositories.NganVHH.Models
@using DrugPrevention.Services.NganVHH
@attribute [StreamRendering]

@* <h3>AppointmentsNganVHHForm</h3> *@

<div class="d-flex justify-content-between align-items-center mb-4">
	<h3 class="mb-0">📋 AppointmentNganVHH Form</h3>
	<button class="btn btn-success" @onclick="NavigateToCreate">
		<i class="bi bi-plus-lg me-1"></i> Create new
	</button>
</div>
<EditForm Model="@appointmentsNganVHH" OnValidSubmit="SaveAppointmentNganVHH">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="card shadow rounded-3 p-4">
		<h5 class="card-title text-primary mb-3">
			@(IsEditMode ? "📝 Chỉnh sửa cuộc hẹn" : "📅 Đặt lịch hẹn mới")
		</h5>

		<div class="row g-3">

			@if (IsEditMode)
			{
				<div class="col-12">
					<label class="form-label fw-semibold">AppointmentNganVHHID</label>
					<input class="form-control" value="@appointmentsNganVHH.AppointmentNganVHHID.ToString()" readonly />
				</div>
			}

			<div class="col-md-6">
				<label class="form-label fw-semibold">UserID</label>
				<InputSelect class="form-control" @bind-Value="appointmentsNganVHH.UserID" disabled="@(!IsFieldEnabled("UserID"))">
					<option value="">-- Chọn người cần tư vấn --</option>
					@foreach (var user in usersTuyenTMs)
					{
						<option value="@user.UserTuyenTMID">@user.UserTuyenTMID - @user.FirstName @user.LastName - @user.Email</option>
					}
				</InputSelect>

			</div>

			<div class="col-md-6">
				<label class="form-label fw-semibold">ConsultantID</label>
				<InputSelect class="form-control" @bind-Value="appointmentsNganVHH.ConsultantID" disabled="@(!IsFieldEnabled("ConsultantID"))">
					<option value="">-- Chọn chuyên gia tư vấn --</option>
					@foreach (var c in consultantsTrongLHs)
					{
						<option value="@c.ConsultantTrongLHID">@c.ConsultantTrongLHID - @c.User.FirstName @c.User.LastName - @c.Specialization - @c.User.Email</option>
					}
				</InputSelect>
			</div>

			<div class="col-md-6">
				<label class="form-label fw-semibold">AppointmentDateTime</label>
				<InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="appointmentsNganVHH.AppointmentDateTime" disabled="@(!IsFieldEnabled("AppointmentDateTime"))" />
			</div>

			<div class="col-md-6">
				<label class="form-label fw-semibold">Duration</label>
				<InputSelect class="form-select" @bind-Value="appointmentsNganVHH.Duration" disabled="@(!IsFieldEnabled("Duration"))">
					<option value="30">30 phút</option>
					<option value="45">45 phút</option>
					<option value="60" selected>60 phút</option>
					<option value="75">75 phút</option>
					<option value="90">90 phút</option>
					<option value="120">120 phút</option>
				</InputSelect>
			</div>

			<div class="col-md-6">
				<label class="form-label fw-semibold">ConsultationType</label>
				<InputSelect class="form-select" @bind-Value="appointmentsNganVHH.ConsultationType" disabled="@(!IsFieldEnabled("ConsultationType"))">
					<option>Online</option>
					<option>In-person</option>
				</InputSelect>
			</div>

			<div class="col-md-6">
				<label class="form-label fw-semibold">AssessmentType</label>
				<InputText class="form-control" @bind-Value="appointmentsNganVHH.AssessmentType" disabled="@(!IsFieldEnabled("AssessmentType"))" />
			</div>

			<div class="col-md-6">
				<label class="form-label fw-semibold">IsInterpreterNeeded</label>
				<InputSelect class="form-select" @bind-Value="appointmentsNganVHH.IsInterpreterNeeded" disabled="@(!IsFieldEnabled("IsInterpreterNeeded"))">
					<option value="true">Có</option>
					<option value="false">Không</option>
				</InputSelect>
			</div>

			<div class="col-md-6">
				<label class="form-label fw-semibold">RiskLevel</label>
				<InputSelect class="form-select" @bind-Value="appointmentsNganVHH.RiskLevel" disabled="@(!IsFieldEnabled("RiskLevel"))">
					<option value="">-- Chọn --</option>
					<option>Low</option>
					<option>Medium</option>
					<option>High</option>
				</InputSelect>
			</div>

			<div class="col-12">
				<label class="form-label fw-semibold">PrimaryIssue</label>
				<InputTextArea class="form-control" @bind-Value="appointmentsNganVHH.PrimaryIssue" rows="2" maxlength="255" disabled="@(!IsFieldEnabled("PrimaryIssue"))" />
			</div>

			@if (IsEditMode)
			{
				<InputSelect TValue="string"
							 class="form-select"
							 Value="@appointmentsNganVHH.Status"
							 ValueChanged="@(e => HandleStatusChanged(e))"
							 ValueExpression="(() => appointmentsNganVHH.Status)">
					<option>Scheduled</option>
					<option>In-Progress</option>
					<option>Completed</option>
					<option>Cancelled</option>
				</InputSelect>


				<div class="col-md-6">
					<label class="form-label fw-semibold">FeedbackRating</label>
					<InputNumber class="form-control" @bind-Value="appointmentsNganVHH.FeedbackRating" disabled="@(!IsFieldEnabled("FeedbackRating"))" />
				</div>

				<div class="col-12">
					<label class="form-label fw-semibold">RecordingLink</label>
					<InputText class="form-control" @bind-Value="appointmentsNganVHH.RecordingLink" disabled="@(!IsFieldEnabled("RecordingLink"))" />
				</div>
			}

			<div class="col-12">
				<label class="form-label fw-semibold">Notes</label>
				<InputTextArea class="form-control" @bind-Value="appointmentsNganVHH.Notes" rows="3" disabled="@(!IsFieldEnabled("Notes"))" />
			</div>
		</div>

		<div class="text-end mt-4">
			<button type="submit" class="btn btn-primary">
				<i class="bi bi-save me-2"></i>@(IsEditMode ? "Lưu thay đổi" : "Tạo mới")
			</button>
			<button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">
				<i class="bi bi-x-circle me-2"></i>Hủy
			</button>
		</div>
	</div>
</EditForm>

<script src="js/appointment-validate.js"></script>

@code {
	[Parameter]
	public int? AppointmentNganID { get; set; }

	public AppointmentsNganVHH appointmentsNganVHH = new();
	public AppointmentsNganVHH originalAppointment = new(); // Lưu data gốc từ database
	public List<ConsultantsTrongLH> consultantsTrongLHs = new();
	public List<UsersTuyenTM> usersTuyenTMs = new();

	public bool IsEditMode => AppointmentNganID.HasValue && AppointmentNganID.Value > 0;

	private void Cancel()
	{
		_navigationManager.NavigateTo("/AppointmentsNganVHHs/AppointmentsNganVHHList");
	}

	private void NavigateToCreate()
	{
		_navigationManager.NavigateTo("/AppointmentsNganVHHs/AppointmentsNganVHHForm");
	}

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		consultantsTrongLHs = await _serviceProviders.ConsultantsTrongLHService.GetAllAsync();
		consultantsTrongLHs = consultantsTrongLHs.Where(c => c.User.Role == "Consultant").ToList();
		usersTuyenTMs = await _serviceProviders.UsersTuyenTMService.GetAllAsync();
		usersTuyenTMs = usersTuyenTMs.Where(u => u.Role == "Member").ToList();

		if (IsEditMode)
		{
			var entity = await _serviceProviders.AppointmentsNganVHHService.GetByIdAsync(AppointmentNganID.Value);
			if (entity != null)
			{
				// Detach navigation properties to avoid EF Core tracking conflicts
				entity.User = null;
				entity.Consultant = null;
				appointmentsNganVHH = entity;
				
				// Lưu bản sao original để restore khi status thay đổi
				originalAppointment = new AppointmentsNganVHH
				{
					AppointmentNganVHHID = entity.AppointmentNganVHHID,
					UserID = entity.UserID,
					ConsultantID = entity.ConsultantID,
					AppointmentDateTime = entity.AppointmentDateTime,
					Duration = entity.Duration,
					ConsultationType = entity.ConsultationType,
					AssessmentType = entity.AssessmentType,
					IsInterpreterNeeded = entity.IsInterpreterNeeded,
					RiskLevel = entity.RiskLevel,
					PrimaryIssue = entity.PrimaryIssue,
					Status = entity.Status,
					FeedbackRating = entity.FeedbackRating,
					RecordingLink = entity.RecordingLink,
					Notes = entity.Notes
				};
			}
			else
			{
				appointmentsNganVHH = new AppointmentsNganVHH();
				originalAppointment = new AppointmentsNganVHH();
			}
		}
		else
		{
			appointmentsNganVHH = new AppointmentsNganVHH()
			{
				AppointmentDateTime = DateTime.Now.AddDays(1),
				Duration = 60,
				ConsultationType = "Online",
				Status = "Scheduled",
				IsInterpreterNeeded = false,
				RiskLevel = "Low"
			};
			// Trong create mode không có original data
			originalAppointment = new AppointmentsNganVHH();
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Clear any previous validation errors
			await _jsRuntime.InvokeVoidAsync("clearAllErrors");
		}
	}

		protected async Task SaveAppointmentNganVHH()
	{
		// Gọi JavaScript validation trước khi submit
		bool isValid = await _jsRuntime.InvokeAsync<bool>("validateAppointmentForm");
		
		if (!isValid)
		{
			// Validation failed - không submit
			return;
		}

		int result = 0;

		appointmentsNganVHH.User = null;
		appointmentsNganVHH.Consultant = null;

		if (IsEditMode)
		{
			result = await _serviceProviders.AppointmentsNganVHHService.UpdateAsync(appointmentsNganVHH);
		}
		else
		{
			if (string.IsNullOrEmpty(appointmentsNganVHH.Status))
			{
				appointmentsNganVHH.Status = "Scheduled";
			}
			result = await _serviceProviders.AppointmentsNganVHHService.CreateAsync(appointmentsNganVHH);
			
		}

		if (result > 0)
		{
			_navigationManager.NavigateTo("/AppointmentsNganVHHs/AppointmentsNganVHHList");
		}
	}

	private bool IsFieldEnabled(string fieldName)
	{
		// Trong mode Create, cho phép edit hầu hết các field trừ feedback và recording
		if (!IsEditMode)
		{
			return fieldName != "FeedbackRating" && fieldName != "RecordingLink";
		}

		// Dựa vào Status để quyết định field nào được enable
		return appointmentsNganVHH.Status switch
		{
			"Scheduled" => fieldName is "UserID" or "ConsultantID" or "AppointmentDateTime" or "Duration" or "ConsultationType" or "AssessmentType" or "IsInterpreterNeeded" or "RiskLevel" or "PrimaryIssue" or "Notes",
			"In-Progress" => fieldName is "Duration" or "AssessmentType" or "PrimaryIssue" or "RiskLevel" or "Notes" or "FeedbackRating" or "RecordingLink",
			"Completed" => fieldName is "FeedbackRating" or "RecordingLink" or "Notes",
			"Cancelled" => fieldName == "Notes",
			_ => false
		};
	}

	private async Task HandleStatusChanged(string newValue)
	{
		var oldStatus = appointmentsNganVHH.Status;
		appointmentsNganVHH.Status = newValue;

		if (IsEditMode)
		{
			// ✅ QUAN TRỌNG: Đợi UI render trước rồi mới restore
			StateHasChanged(); // Trigger render với status mới
			await Task.Delay(50); // Đảm bảo UI đã render xong
			
			RestoreDisabledFields(); // Gọi sync method
		}
	}

	private void RestoreDisabledFields()
	{
		// Danh sách tất cả các field có thể bị disable
		var allFields = new[]
		{
			"UserID", "ConsultantID", "AppointmentDateTime", "Duration", 
			"ConsultationType", "AssessmentType", "IsInterpreterNeeded", 
			"RiskLevel", "PrimaryIssue", "FeedbackRating", "RecordingLink", "Notes"
		};

		// Reset các field bị disable về giá trị original
		foreach (var fieldName in allFields)
		{
			if (!IsFieldEnabled(fieldName))
			{
				switch (fieldName)
				{
					case "UserID":
						appointmentsNganVHH.UserID = originalAppointment.UserID;
						break;
					case "ConsultantID":
						appointmentsNganVHH.ConsultantID = originalAppointment.ConsultantID;
						break;
					case "AppointmentDateTime":
						appointmentsNganVHH.AppointmentDateTime = originalAppointment.AppointmentDateTime;
						break;
					case "Duration":
						appointmentsNganVHH.Duration = originalAppointment.Duration;
						break;
					case "ConsultationType":
						appointmentsNganVHH.ConsultationType = originalAppointment.ConsultationType;
						break;
					case "AssessmentType":
						appointmentsNganVHH.AssessmentType = originalAppointment.AssessmentType;
						break;
					case "IsInterpreterNeeded":
						appointmentsNganVHH.IsInterpreterNeeded = originalAppointment.IsInterpreterNeeded;
						break;
					case "RiskLevel":
						appointmentsNganVHH.RiskLevel = originalAppointment.RiskLevel;
						break;
					case "PrimaryIssue":
						appointmentsNganVHH.PrimaryIssue = originalAppointment.PrimaryIssue;
						break;
					case "FeedbackRating":
						appointmentsNganVHH.FeedbackRating = originalAppointment.FeedbackRating;
						break;
					case "RecordingLink":
						appointmentsNganVHH.RecordingLink = originalAppointment.RecordingLink;
						break;
					case "Notes":
						appointmentsNganVHH.Notes = originalAppointment.Notes;
						break;
				}
			}
		}
	}
}

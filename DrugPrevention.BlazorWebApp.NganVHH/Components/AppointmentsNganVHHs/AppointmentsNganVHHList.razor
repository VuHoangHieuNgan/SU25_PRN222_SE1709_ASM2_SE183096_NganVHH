@page "/AppointmentsNganVHHs/AppointmentsNganVHHList"
@attribute [Authorize]
@attribute [StreamRendering]
@using DrugPrevention.Repositories.NganVHH.Models

<div class="d-flex justify-content-between align-items-center mb-4">
	<h3 class="mb-0">📋 Appointments NganVHH List</h3>
	<button class="btn btn-success" @onclick="NavigateToCreate">
		<i class="bi bi-plus-lg me-1"></i> Create new
	</button>
</div>

<!-- Form tìm kiếm -->
<div class="mb-3">
	<div class="row g-2">
		<div class="col">
			<input class="form-control" placeholder="Primary Issue" @bind="PrimaryIssue" />
		</div>
		<div class="col">
			<input class="form-control" placeholder="Duration" type="number" @bind="Duration" />
		</div>
		<div class="col">
			<input class="form-control" placeholder="Specialization" @bind="Specialization" />
		</div>
		<div class="col-auto">
			<button class="btn btn-primary" @onclick="Search">Tìm kiếm</button>
			<button class="btn btn-secondary ms-2" @onclick="ResetSearch">Làm mới</button>
		</div>
		<div class="col-auto">
			<select class="form-select" @onchange="ChangePageSize" style="width: auto;">
				<option value="5" selected="@(PageSize == 5)">5 / trang</option>
				<option value="10" selected="@(PageSize == 10)">10 / trang</option>
				<option value="20" selected="@(PageSize == 20)">20 / trang</option>
				<option value="50" selected="@(PageSize == 50)">50 / trang</option>
			</select>
		</div>
	</div>
</div>

@if (appointmentsNganVHHs == null)
{
	<div class="d-flex justify-content-center align-items-center" style="height: 300px;">
		<div aria-label="Orange and tan hamster running in a metal wheel" role="img" class="wheel-and-hamster">
			<div class="wheel"></div>
			<div class="hamster">
				<div class="hamster__body">
					<div class="hamster__head">
						<div class="hamster__ear"></div>
						<div class="hamster__eye"></div>
						<div class="hamster__nose"></div>
					</div>
					<div class="hamster__limb hamster__limb--fr"></div>
					<div class="hamster__limb hamster__limb--fl"></div>
					<div class="hamster__limb hamster__limb--br"></div>
					<div class="hamster__limb hamster__limb--bl"></div>
					<div class="hamster__tail"></div>
				</div>
			</div>
			<div class="spoke"></div>
		</div>
	</div>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>AppointmentNganVHHID</th>
				<th>AppointmentDateTime</th>
				<th>AssessmentType</th>
				<th>PrimaryIssue</th>
				<th>Duration</th>
				<th>Specialization</th>
				<th>Consultant Email</th>
				<th>User Email</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var appointmentsNganVHH in appointmentsNganVHHs)
			{
				<tr>
					<td>@appointmentsNganVHH.AppointmentNganVHHID</td>
					<td>@appointmentsNganVHH.AppointmentDateTime</td>
					<td>@appointmentsNganVHH.AssessmentType</td>
					<td>@appointmentsNganVHH.PrimaryIssue</td>
					<td>@appointmentsNganVHH.Duration</td>
					<td>@appointmentsNganVHH.Consultant?.Specialization</td>
					<td>@appointmentsNganVHH.Consultant?.User?.Email</td>
					<td>@appointmentsNganVHH.User?.Email</td>
					<td>@appointmentsNganVHH.Status</td>
					<td>
						<a href="/AppointmentsNganVHHs/AppointmentsNganVHHDetail/@appointmentsNganVHH.AppointmentNganVHHID" class="btn btn-sm btn-primary">Detail</a>
						<a href="/AppointmentsNganVHHs/AppointmentsNganVHHForm/@appointmentsNganVHH.AppointmentNganVHHID" class="btn btn-sm btn-warning">Edit</a>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<!-- Modern Bootstrap Pagination - Chỉ hiển thị khi có nhiều hơn 1 trang -->
	@if (TotalPages > 1)
	{
		<div class="d-flex justify-content-center mt-4">
			<nav aria-label="Pagination Navigation">
				<ul class="pagination">
					<!-- First Page Button -->
					<li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
						<button class="page-link" @onclick="() => ChangePage(1)" disabled="@(CurrentPage == 1)" title="Trang đầu">
							<i class="bi bi-chevron-double-left"></i>
							<span class="d-none d-sm-inline ms-1">Đầu</span>
						</button>
					</li>
					
					<!-- Previous Page Button -->
					<li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
						<button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)" title="Trang trước">
							<i class="bi bi-chevron-left"></i>
							<span class="d-none d-sm-inline ms-1">Trước</span>
						</button>
					</li>

					<!-- Page Numbers -->
					@{
						int startPage = Math.Max(1, CurrentPage - 2);
						int endPage = Math.Min(TotalPages, CurrentPage + 2);
						
						// Đảm bảo hiển thị tối đa 5 pages
						if (endPage - startPage < 4)
						{
							if (startPage == 1)
								endPage = Math.Min(TotalPages, startPage + 4);
							else if (endPage == TotalPages)
								startPage = Math.Max(1, endPage - 4);
						}
					}

					@for (int i = startPage; i <= endPage; i++)
					{
						int pageNum = i; // Capture for closure
						<li class="page-item @(pageNum == CurrentPage ? "active" : "")">
							<button class="page-link" @onclick="() => ChangePage(pageNum)">
								@pageNum
								@if (pageNum == CurrentPage)
								{
									<span class="visually-hidden">(current)</span>
								}
							</button>
						</li>
					}

					<!-- Next Page Button -->
					<li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
						<button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)" title="Trang tiếp">
							<span class="d-none d-sm-inline me-1">Tiếp</span>
							<i class="bi bi-chevron-right"></i>
						</button>
					</li>
					
					<!-- Last Page Button -->
					<li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
						<button class="page-link" @onclick="() => ChangePage(TotalPages)" disabled="@(CurrentPage == TotalPages)" title="Trang cuối">
							<span class="d-none d-sm-inline me-1">Cuối</span>
							<i class="bi bi-chevron-double-right"></i>
						</button>
					</li>
				</ul>
			</nav>
		</div>
	}

	<!-- Pagination Info -->
	@if (TotalRecords > 0)
	{
		<div class="text-center mt-3">
			<small class="text-muted">
				Trang @CurrentPage / @Math.Max(1, TotalPages) - Hiển thị @((CurrentPage - 1) * PageSize + 1) đến @(Math.Min(CurrentPage * PageSize, TotalRecords)) / @TotalRecords kết quả
			</small>
		</div>
	}
	else
	{
		<div class="text-center mt-3">
			<small class="text-muted">Không có dữ liệu để hiển thị</small>
		</div>
	}
}

@code {
	private List<AppointmentsNganVHH> appointmentsNganVHHs;

	public string PrimaryIssue { get; set; } = string.Empty;
	public int? Duration { get; set; }
	public string Specialization { get; set; } = string.Empty;

	public int CurrentPage { get; set; } = 1;
	public int TotalPages { get; set; }
	public int PageSize { get; set; } = 5;
	public int TotalRecords { get; set; }

	private bool isSearching = false; // Flag để biết đang search hay load all

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private async Task LoadData()
	{
		if (isSearching)
		{
			// Server-side pagination cho search
			appointmentsNganVHHs = await _serviceProviders.AppointmentsNganVHHService.SearchAsync(
				PrimaryIssue ?? string.Empty,
				Duration,
				Specialization ?? string.Empty,
				CurrentPage,
				PageSize
			);
			
			// Lấy tổng số records cho search
			TotalRecords = await _serviceProviders.AppointmentsNganVHHService.GetSearchCountAsync(
				PrimaryIssue ?? string.Empty,
				Duration,
				Specialization ?? string.Empty
			);
		}
		else
		{
			// Load all với pagination - sử dụng search với empty parameters
			appointmentsNganVHHs = await _serviceProviders.AppointmentsNganVHHService.SearchAsync(
				string.Empty,
				null,
				string.Empty,
				CurrentPage,
				PageSize
			);
			
			// Lấy tổng số records
			TotalRecords = await _serviceProviders.AppointmentsNganVHHService.GetTotalCountAsync();
		}

		// Tính tổng số trang
		TotalPages = (int)Math.Ceiling((double)TotalRecords / PageSize);
		
		// Đảm bảo CurrentPage hợp lệ
		if (CurrentPage > TotalPages && TotalPages > 0)
			CurrentPage = TotalPages;
		if (CurrentPage < 1)
			CurrentPage = 1;

		// Sắp xếp theo ID giảm dần (nếu cần)
		appointmentsNganVHHs = appointmentsNganVHHs.OrderByDescending(a => a.AppointmentNganVHHID).ToList();
	}

	private async Task Search()
	{
		isSearching = true;
		CurrentPage = 1; // Reset về trang 1 khi search
		await LoadData();
	}

	private async Task ResetSearch()
	{
		PrimaryIssue = string.Empty;
		Duration = null;
		Specialization = string.Empty;
		isSearching = false;
		CurrentPage = 1;
		await LoadData();
	}

	private async Task ChangePage(int page)
	{
		if (page >= 1 && page <= TotalPages && page != CurrentPage)
		{
			CurrentPage = page;
			await LoadData();
			StateHasChanged();
		}
	}

	private async Task ChangePageSize(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int newPageSize))
		{
			PageSize = newPageSize;
			CurrentPage = 1; // Reset về trang 1 khi thay đổi page size
			await LoadData();
			StateHasChanged();
		}
	}

	private void NavigateToCreate()
	{
		_navigationManager.NavigateTo("/AppointmentsNganVHHs/AppointmentsNganVHHForm");
	}
}
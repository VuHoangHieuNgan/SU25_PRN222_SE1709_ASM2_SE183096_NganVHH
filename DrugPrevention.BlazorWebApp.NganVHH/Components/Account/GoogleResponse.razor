@page "/Account/Login/GoogleResponse"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication.Google
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using DrugPrevention.Repositories.NganVHH.Models
@using DrugPrevention.Services.NganVHH

@inject IServiceProvider ServiceProvider
@inject NavigationManager _navigationManager
@inject IHttpContextAccessor _httpContextAccessor
@inject IServiceProviders _serviceProviders

<p>Đang xử lý đăng nhập Google...</p>

@code {
	protected override async Task OnInitializedAsync()
	{
		try
		{
			var httpContext = _httpContextAccessor.HttpContext;
			if (httpContext is null)
			{
				_navigationManager.NavigateTo("/Account/Login?error=NoHttpContext", true);
				return;
			}

			var result = await httpContext.AuthenticateAsync(GoogleDefaults.AuthenticationScheme);

			if (!result.Succeeded)
			{
				_navigationManager.NavigateTo("/Account/Login?error=google_failed", true);
				return;
			}

			var claims = result.Principal.Claims;
			var email = claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
			var name = claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
			var userName = email?.Split('@')[0];

			if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(userName))
			{
				_navigationManager.NavigateTo("/Account/Login?error=MissingGoogleInfo", true);
				return;
			}

			var user = await CreateOrGetGoogleUser(email, name ?? userName, userName);

			var identity = new ClaimsIdentity(new[]
			{
				new Claim(ClaimTypes.Name, user.UserName),
				new Claim(ClaimTypes.Email, user.Email),
				new Claim(ClaimTypes.Role, user.RoleId.ToString()),
				new Claim(ClaimTypes.NameIdentifier, user.UserAccountID.ToString())
			}, CookieAuthenticationDefaults.AuthenticationScheme);

			await httpContext.SignInAsync(
				CookieAuthenticationDefaults.AuthenticationScheme,
				new ClaimsPrincipal(identity));

			// Optional: set cookies if needed
			var cookieOptions = new CookieOptions
			{
				Expires = DateTime.Now.AddDays(30),
				HttpOnly = true,
				IsEssential = true
			};
			httpContext.Response.Cookies.Append("UserEmail", email, cookieOptions);
			httpContext.Response.Cookies.Append("UserName", user.UserName, cookieOptions);
			httpContext.Response.Cookies.Append("UserId", user.UserAccountID.ToString(), cookieOptions);

			// Redirect to dashboard
			_navigationManager.NavigateTo("/AppointmentsNganVHHs/AppointmentsNganVHHList", true);
		}
		catch
		{
			_navigationManager.NavigateTo("/Account/Login?error=GoogleException", true);
		}
	}

	private async Task<System_UserAccount> CreateOrGetGoogleUser(string email, string name, string userName)
	{
		var existingUser = await _serviceProviders.SystemUserAccountService.GetUserByEmailAsync(email);

		if (existingUser != null)
			return existingUser;

		var newUser = new System_UserAccount
		{
			UserName = userName,
			Email = email,
			FullName = name,
			Password = Guid.NewGuid().ToString(),
			Phone = "",
			EmployeeCode = userName,
			RoleId = 2,
			CreatedDate = DateTime.Now,
			IsActive = true,
			CreatedBy = "Google"
		};

		await _serviceProviders.SystemUserAccountService.CreateUserAccountAsync(newUser);

		return newUser;
	}
}
